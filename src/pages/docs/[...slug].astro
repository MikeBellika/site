---
import { join } from 'node:path';

import { getCollection } from 'astro:content';

import DocsLayout, { type Props as DocsLayoutProps } from '../../layouts/docs-layout.astro';
import {
  resolveFeatureIcon,
  resolvePageTitle,
  resolveRootCategory,
  resolveSubCategory,
  sidebarItemsOrder,
} from '../../layouts/nav/docs-sidebar-items';
import {
  isSidebarGroup,
  type SidebarFeatureItem,
  type SidebarGroup,
  type SidebarItems,
  type SidebarLink,
} from '../../layouts/nav/sidebar-items';
import { jsLibraries } from '../../stores/libraries';
import { kebabToTitleCase } from '../../utils/string';

export const prerender = true;

interface Props extends DocsLayoutProps {}

export async function getStaticPaths() {
  const pages = await getCollection('docs'),
    pagePropsMap = new Map<string, Props>(),
    overviewFilterRE = /^(.*?)\/overview/,
    jsLibSegmentRE = /\/(wc|react)\//,
    indexFileRE = /index\..+$/,
    basePath = '/docs';

  return jsLibraries.flatMap((jsLibrary) => {
    pagePropsMap.clear();

    const jsLibPrefix = jsLibrary === 'react' ? '' : 'wc',
      jsLibSegment = '/' + (jsLibrary === 'web-components' ? 'wc' : jsLibrary) + '/',
      categories: SidebarFeatureItem[] = [],
      sidebarItems: SidebarItems = { Overview: [], API: [], Components: [] };

    const staticPaths = pages
      .filter((page) => !jsLibSegmentRE.test(page.slug) || page.slug.includes(jsLibSegment))
      .map((page) => {
        const filteredSlug = page.slug.replace(jsLibSegmentRE, '/').replace(overviewFilterRE, '$1'),
          slug = join(jsLibPrefix, filteredSlug) as any,
          sidebarId = page.id.replace(jsLibSegmentRE, '/').replace(/.*?\//, ''),
          rootCategory = resolveRootCategory(sidebarId),
          subCategory = resolveSubCategory(sidebarId),
          props: DocsLayoutProps = {
            jsLibrary,
            page: { ...page, slug },
            pageTitle: resolvePageTitle(page),
            pagination: {}, // Set below.
            categories,
            category: subCategory || rootCategory,
            sidebar: {
              id: sidebarId,
              root: rootCategory,
              items: sidebarItems[rootCategory],
              deepMatch: page.slug.includes('/installation'),
            },
          };

        pagePropsMap.set(page.id, props);

        return {
          params: { slug },
          props,
        };
      });

    // Build sidebar nav items.
    for (const category of Object.keys(sidebarItemsOrder)) {
      const ids = sidebarItemsOrder[category],
        items = sidebarItems[category],
        firstPageProps = pagePropsMap.get(ids[0]);

      if (firstPageProps) {
        categories.push({
          title: category,
          href: `${basePath}/${firstPageProps.page.slug}`,
          Icon: resolveFeatureIcon(category),
        });
      }

      for (let i = 0; i < ids.length; i++) {
        const props = pagePropsMap.get(ids[i]);

        if (!props || props.sidebar.root !== category) continue;

        let { page, sidebar } = props,
          segments = sidebar.id.split('/').slice(1, indexFileRE.test(sidebar.id) ? -2 : -1),
          sidebarTitle = page.data.sidebar_title || props.pageTitle,
          prevPage = pagePropsMap.get(ids[i - 1]),
          nextPage = pagePropsMap.get(ids[i + 1]);

        let group = items;
        for (const segment of segments) {
          let title = kebabToTitleCase(segment),
            next = group.find((item) => isSidebarGroup(item) && item.title === title) as
              | SidebarGroup
              | undefined;

          if (!next) group.push((next = { title, items: [] }));

          group = next.items;
        }

        const item: SidebarLink = {
          title: sidebarTitle,
          href: `${basePath}/${page.slug}`,
        };

        group.push(item);

        if (prevPage) {
          props.pagination.prev = {
            title: prevPage.pageTitle,
            href: `${basePath}/${prevPage.page.slug}`,
          };
        }

        if (nextPage) {
          props.pagination.next = {
            title: nextPage.pageTitle,
            href: `${basePath}/${nextPage.page.slug}`,
          };
        }
      }
    }

    return staticPaths;
  });
}
---

<DocsLayout {...Astro.props} />
