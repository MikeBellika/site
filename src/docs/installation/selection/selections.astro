---
import clsx from 'clsx';

import GradientBorder from '~/components/gradient-border.svelte';
import InfoPopup from '~/components/info-popup.astro';
import Style from '~/components/style/style.svelte';
import type { JSLibrary } from '~/stores/libraries';
import { isString } from '~/utils/unit';

import SelectionManager from './selection-manager.svelte';
import type { JSSelection, selections } from './selection-stores';

interface Props {
  type: keyof typeof selections;
  label: string;
  param?: string;
  basePath?: string;
  options: {
    label: string;
    Info?: any;
    Icon: any;
    color?: 'red' | 'blue' | 'green' | 'orange' | 'cyan' | 'pink' | 'purple' | 'white' | 'yellow';
    jsLib?: JSLibrary;
    framework?: JSSelection;
  }[];
}

const { pathname } = Astro.url,
  { type: store, label, param, options, basePath = '' } = Astro.props;
---

<SelectionManager {store} {param} client:load>
  <div
    class="grid grid-cols-2 gap-x-8 gap-y-10 pb-8 pt-4 576:grid-cols-3 1200:grid-cols-4"
    role={param ? 'listbox' : null}
    aria-label={label}
  >
    {
      options.map(({ label, Info, Icon, color, jsLib, framework }, i) => {
        const id = label.replace(' ', '-').toLowerCase(),
          isActive = !param && pathname.replace(/\/$/, '').endsWith(`/${id}`);

        const props = {
          class:
            'not-prose group hocus:text-[var(--from-color)] data-[active]:text-[var(--from-color)]',
          role: param ? 'option' : null,
          'data-option': '',
          'data-value': id,
          'data-active': isActive ? '' : null,
          'data-js-lib': jsLib,
          'data-framework': framework,
          tabindex: 0,
          style: 'box-shadow: none;',
        } as const;

        const contents = (
          <div class="relative">
            <GradientBorder class="hidden rounded-md group-data-[active]:inline group-hocus:inline" />
            <div
              class={clsx(
                'flex items-center justify-center group-hocus:border-transparent group-hocus:bg-elevate',
                'rounded-md border-2 border-border/90 bg-clip-padding font-medium',
                'cursor-pointer py-8 font-mono group-data-[active]:border-transparent',
                'group-data-[active]:bg-elevate',
              )}
            >
              <Icon class="h-[50px] w-[50px] shrink-0" />
            </div>
          </div>
        );

        const title = (
          <div
            class={clsx(
              'flex w-full items-center justify-center pt-3 text-center text-sm font-medium text-soft',
              'group-data-[active]:text-inverse group-hocus:text-inverse',
            )}
          >
            {label}
            {Info ? (
              <InfoPopup class="ml-1" label="More information" contain placement="bottom">
                {isString(Info) ? Info : <Info />}
              </InfoPopup>
            ) : null}
          </div>
        );

        return (
          <Style
            style={`--from-color: var(--js-${color}-gradient-start); --to-color: var(--js-${color}-gradient-end);`}
          >
            {param ? (
              <div {...props}>
                {contents}
                {title}
              </div>
            ) : (
              <div class="flex flex-col justify-center">
                <a {...props} href={`${basePath}/${id}`}>
                  {contents}
                </a>
                {title}
              </div>
            )}
          </Style>
        );
      })
    }
  </div>
</SelectionManager>
