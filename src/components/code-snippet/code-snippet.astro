---
import type { HTMLAttributes } from 'astro/types';
import { get } from 'svelte/store';

import { codeSnippets } from '../../stores/code-snippets';
import { currentJSLibrary } from '../../stores/libraries';
import CodeBlock from './code-block.astro';
import CodeSnippetLoader from './code-snippet-loader.svelte';
import CopyCodeButton from './copy-code-button.svelte';

interface Props extends HTMLAttributes<'div'> {
  id: string;
  domId?: string | null;
  title?: string;
  ext?: boolean;
  copy?: boolean;
  flat?: boolean;
  numbered?: boolean;
  highlights?: string;
}

const { id, highlights: propHighlights, copy, ext, ...restProps } = Astro.props,
  { pathname } = Astro.url,
  isRelativeId = id.startsWith('./') || id.startsWith('../'),
  baseId = id.replace(/^\.\.?\//, ''), // strip relative path
  snippet = findCodeSnippet(
    baseId.replace(/\..*?$/, ''), // strip ext
    baseId.split('.')[1],
    id.startsWith('../'),
  ),
  highlights = propHighlights ?? snippet?.highlights,
  snippetId = (snippet?.id ?? id) + (baseId.includes('.') && snippet ? `.${snippet.ext}` : ''),
  codeBlockProps = {
    id: snippetId,
    highlights,
    lines: snippet?.lines,
    ...restProps,
  } as any;

function findCodeSnippet(id: string, ext?: string, up?: boolean) {
  if (isRelativeId) {
    let jsLibDir = get(currentJSLibrary) === 'web-components' ? 'wc' : get(currentJSLibrary),
      pathId = pathname.slice(1).replace(/\/$/, '').replace(`/${jsLibDir}/`, '/');

    if (up) {
      pathId = pathId.split('/').slice(0, -1).join('/');
      if (id.includes('/')) {
        const segments = id.split('/');
        id = segments.pop()!;
        pathId += '/' + segments;
      }
    }

    let jsLibPathId = `${pathId}/${jsLibDir}`,
      matches = get(codeSnippets).filter(
        (snippet) =>
          snippet.id.startsWith(pathId) &&
          snippet.id.replace(`/${jsLibDir}`, '').endsWith(`/${id}`) &&
          (!ext || snippet.ext === ext),
      );

    return (
      matches.find((match) => match.id.startsWith(jsLibPathId)) ??
      matches.find((match) => match.id === `${pathId}/${id}`)
    );
  }

  return get(codeSnippets).find((snippet) => snippet.id === id && (!ext || snippet.ext === ext));
}

if (!snippet) {
  console.warn(`⚠️ No code snippet was found for the id \`${id}\` at \`${pathname}\`.`);
}

const defaultTitle =
  (copy || ext) && snippet ? (snippet.ext === 'bash' ? 'terminal' : snippet.ext) : undefined;
---

{
  snippet &&
    (copy ? (
      <CodeBlock title={defaultTitle} {...codeBlockProps} copy>
        <CopyCodeButton id={snippetId} {highlights} class="ml-auto" slot="top-bar" client:load />
        <CodeSnippetLoader id={snippetId} {highlights} client:load />
      </CodeBlock>
    ) : (
      <CodeBlock title={defaultTitle} {...codeBlockProps}>
        <CodeSnippetLoader id={snippetId} {highlights} client:load />
      </CodeBlock>
    ))
}
