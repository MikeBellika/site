---
import clsx from 'clsx';

import ArrowRightIcon from '~astro-icons/lucide/arrow-right';
import StarIcon from '~astro-icons/lucide/star';

import Badge, { type BadgeColor } from '../badge.svelte';
import GithubStars from '../github-stars.svelte';
import type { StageTitle } from '../stage-badge.svelte';
import StageBadge from '../stage-badge.svelte';

export interface GridContentItem {
  title: string;
  badge?: string | { title: string; color: BadgeColor };
  stage?: StageTitle;
  stars?: { owner: string; repo: string };
  description: string;
  href?: string | { title: string; href: string };
  Icon?: any;
}

interface Props {
  label: string;
  align?: 'start' | 'center';
  content: GridContentItem[];
  newTab?: boolean;
}

const { label, align = 'center', content, newTab = false } = Astro.props;

function getHref(href: GridContentItem['href']) {
  return typeof href === 'string' ? href : href?.href;
}
---

<div class="w-full max-w-full 576:mx-auto 576:max-w-5xl">
  <ul
    class={clsx(
      align === 'start' ? 'grid' : 'inline-grid 576:justify-items-center',
      'w-full gap-12 px-4 grid-cols-1 text-left',
      '576:grid-cols-2 576:gap-12 576:w-auto',
      '768:grid-cols-3',
      'auto-rows-fr',
    )}
    aria-label={label}
  >
    {
      content.map(({ title, badge, stage, stars, href, description, Icon }) => {
        const isExternal = !!getHref(href)?.startsWith('http');
        return (
          <li class="flex w-full flex-col space-y-3 text-inverse" data-grid-item>
            <div class="flex flex-row items-center justify-start">
              {Icon ? <Icon class="mr-2.5" width={22} height={22} /> : null}
              <span class="font-semibold text-inverse">{title}</span>
              {stage && <StageBadge class="ml-2 text-xs" stage={stage} client:visible />}
              {badge && (
                <Badge
                  class="ml-2 text-xs"
                  color={typeof badge === 'string' ? undefined : badge.color}
                >
                  {typeof badge === 'string' ? badge : badge.title}
                </Badge>
              )}
              {stars && (
                <div class="ml-auto flex items-center text-xs font-medium">
                  <StarIcon class="mr-1 h-3 w-3" />
                  <GithubStars owner={stars.owner} repo={stars.repo} flat client:load />
                </div>
              )}
            </div>

            <p class="w-full text-sm text-soft">{description}</p>

            <div class="flex-1" />

            {href && (
              <a
                class="group flex items-center rounded-md p-0.5 text-sm text-brand"
                href={getHref(href)}
                target={isExternal || newTab ? '_blank' : null}
                rel={isExternal ? 'noreferrer' : null}
              >
                {typeof href === 'string' ? 'Learn more' : href.title}
                <ArrowRightIcon class="h-3.5 w-3.5 -translate-x-2 opacity-0 transition-all group-hocus:translate-x-px group-hocus:opacity-100" />
              </a>
            )}
          </li>
        );
      })
    }
  </ul>
</div>
