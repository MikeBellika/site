---
import CodeBlockWrapper from '~/components/code-snippet/code-block-wrapper.svelte';
import Table from '~/components/table.astro';
import Heading from '~/docs/components/heading.svelte';
import { camelToKebabCase } from '~/utils/string';
import { Code } from 'astro:components';
import { H } from 'vidstack/dist/types/vidstack-9f0b9c4c.js';

import { findMDNLink, findWebComponents, getLinks } from './api-utils';
import NameCell from './name-table-cell.astro';
import TypeCell from './type-table-cell.astro';

const { pathname } = Astro.url,
  components = findWebComponents(pathname),
  tableHeadingLevel = components.length === 1 ? 3 : 4;
---

{
  components.length ? (
    <>
      <Heading title="API Reference" level={2} />

      {components.map((component, index) => {
        const componentName = component.name.replace('Media', '').replace('Element', '');

        const importCode = [
          `import { defineCustomElement, ${component?.name} } from "vidstack/elements";`,
          '',
          `defineCustomElement(${component?.name});`,
        ].join('\n');

        const instanceCode = [
          '// Get element reference to call props/methods.',
          `const instance = document.querySelector("${component.tag.name}");`,
        ].join('\n');

        const example = component.doctags?.find((tag) => tag.name === 'example')?.text,
          html =
            example?.replace(/\`\`\`.*?\n/, '').replace('\n```', '') ??
            [`<${component?.tag.name}></${component?.tag.name}>`].join('\n');

        const props = (component?.instance?.props || [])
          .filter((prop) => !prop.internal)
          .map((prop) => {
            let attr: string | false | undefined =
              component.attrs?.[prop.name]?.attr ?? camelToKebabCase(prop.name);
            if (attr === false) attr = undefined;

            return [
              <NameCell
                id={`${componentName}.props.${prop.name}`.toLowerCase()}
                name={prop.name}
                docs={prop.docs}
                badges={[attr && `Attribute: ${attr}`]}
                mdnLink={findMDNLink(getLinks(prop))}
              />,
              <TypeCell concise={prop.type.primitive} full={prop.type.full} />,
              <code>{prop.default ?? 'undefined'}</code>,
            ];
          });

        const state = (component?.instance?.state || [])
          .filter((prop) => !prop.internal)
          .map((prop) => [
            <NameCell
              id={`${componentName}.state.${prop.name}`.toLowerCase()}
              name={prop.name}
              docs={prop.docs}
              mdnLink={findMDNLink(getLinks(prop))}
            />,
            <TypeCell concise={prop.type.primitive} full={prop.type.full} />,
            <code>{prop.default ?? 'undefined'}</code>,
          ]);

        const stateUsageCode = state.length
          ? [
              `const instance = document.querySelector("${component.tag.name}");`,
              '',
              '// Read',
              'const { /* state props */ } = instance.state;',
              '',
              `instance.subscribe(({ /* state props */ }) => {`,
              '  // Callback will fire when accessed state props update.',
              '});',
            ].join('\n')
          : '';

        const events = (component.instance?.events || [])
          .filter((event) => !event.internal)
          .map((event) => [
            <NameCell
              id={`${componentName}.events.${event.name}`.toLowerCase()}
              name={event.name}
              docs={event.docs}
              badges={[`Detail: ${event.detail.concise}`]}
              mdnLink={findMDNLink(getLinks(event))}
            />,
            <TypeCell concise={event.type.concise} full={`Detail: ${event.detail.full}`} />,
          ]);

        const instanceProps = (component.instance?.members?.props || [])
          .filter((prop) => !prop.internal)
          .map((prop) => [
            <NameCell
              id={`${componentName}.instance.props.${prop.name}`.toLowerCase()}
              name={prop.name}
              docs={prop.docs}
              badges={[prop.readonly && 'readonly']}
              mdnLink={findMDNLink(getLinks(prop))}
            />,
            <TypeCell
              concise={prop.type.concise.includes(' ') ? prop.type.primitive : prop.type.concise}
              full={prop.type.full}
            />,
          ]);

        const instanceMethods = (component.instance?.members?.methods || [])
          .filter((prop) => !prop.internal)
          .map((method) => [
            <NameCell
              id={`${componentName}.instance.methods.${method.name}`.toLowerCase()}
              name={method.name}
              docs={method.docs}
              mdnLink={findMDNLink(getLinks(method))}
            />,
            <TypeCell concise="method" full={method.signature.type} />,
          ]);

        const dataAttrs = component.instance?.doctags
          ?.filter((tag) => tag.name === 'attr' && tag.text)
          .map((tag) => tag.text!.split(/\s+-\s+/))
          .map(([name, desc]) => [
            <h6 id={`${componentName}.dataattrs.${name}`.toLowerCase()}>
              <code>{name}</code>
            </h6>,
            desc,
          ]);

        const dataAttrsUsageCode = dataAttrs
          ? ['/* Example. */', `${component.tag.name}[data-foo] {}`].join('\n')
          : '';

        const dataParts = component.doctags
          ?.filter((tag) => tag.name === 'part' && tag.text)
          .map((tag) => tag.text!.split(/\s+-\s+/))
          .map(([name, desc]) => [
            <h6 id={`${componentName}.dataparts.${name}`.toLowerCase()}>
              <code>{name}</code>
            </h6>,
            desc,
          ]);

        const dataPartUsageCode = dataParts
          ? ['<!-- Example -->', `<div data-part="${dataParts[0]?.[0]}"></div>`].join('\n')
          : '';

        const cssVars = component.instance?.cssvars?.map((cssvar) => [
          <NameCell
            id={`${componentName}.cssvars.${cssvar.name}`.toLowerCase()}
            name={`--${cssvar.name}`}
            badges={[cssvar.readonly && 'readonly']}
          />,
          cssvar.docs?.replace('<p>', '').replace('</p>', '').trim(),
        ]);

        return (
          <div>
            {components.length > 1 ? <Heading title={componentName} level={3} /> : null}

            {component.instance?.docs ? <Fragment set:html={component.instance?.docs} /> : null}

            <CodeBlockWrapper class="not-prose text-sm font-normal">
              <div class="flex flex-col">
                <Code code={importCode} lang="tsx" theme="github-dark" />
                <Code code={importCode} lang="tsx" theme="github-light" />
                <div class="mt-6">
                  <Code code={html} lang="html" theme="github-dark" />
                  <Code code={html} lang="html" theme="github-light" />
                </div>
              </div>
            </CodeBlockWrapper>

            {props.length ? (
              <div>
                <Heading title="Props" slug={`${componentName}.props`} level={tableHeadingLevel} />
                <Table cols={['Prop', 'Type', 'Default']} rows={props} />{' '}
              </div>
            ) : null}

            {state.length ? (
              <div>
                <Heading title="State" slug={`${componentName}.state`} level={tableHeadingLevel} />
                <CodeBlockWrapper class="not-prose text-sm font-normal">
                  <Code code={stateUsageCode} lang="ts" theme="github-dark" />
                  <Code code={stateUsageCode} lang="ts" theme="github-light" />
                </CodeBlockWrapper>
                <Table cols={['Prop', 'Type', 'Default']} rows={state} />{' '}
              </div>
            ) : null}

            {events.length ? (
              <div class="mt-8">
                <Heading
                  title="Events"
                  slug={`${componentName}.events`}
                  level={tableHeadingLevel}
                />
                <Table cols={['Event', 'Type']} rows={events} />
              </div>
            ) : null}

            {instanceProps.length || instanceMethods.length ? (
              <div>
                <Heading
                  title="Instance"
                  slug={`${componentName}.instance`}
                  level={tableHeadingLevel}
                />
                <CodeBlockWrapper class="not-prose text-sm font-normal">
                  <Code code={instanceCode} lang="ts" theme="github-dark" />
                  <Code code={instanceCode} lang="ts" theme="github-light" />
                </CodeBlockWrapper>
                <Table cols={['Prop', 'Type']} rows={[...instanceProps, ...instanceMethods]} />
              </div>
            ) : null}

            {cssVars?.length ? (
              <div>
                <Heading
                  title="CSS Variables"
                  slug={`${componentName}.cssvars`}
                  level={tableHeadingLevel}
                />
                <Table cols={['Name', 'Description']} rows={cssVars} />
              </div>
            ) : null}

            {dataAttrs?.length ? (
              <div>
                <Heading
                  title="Data Attributes"
                  slug={`${componentName}.attrs`}
                  level={tableHeadingLevel}
                />
                <CodeBlockWrapper class="not-prose text-sm font-normal">
                  <Code code={dataAttrsUsageCode} lang="css" theme="github-dark" />
                  <Code code={dataAttrsUsageCode} lang="css" theme="github-light" />
                </CodeBlockWrapper>
                <Table cols={['Name', 'Description']} rows={dataAttrs} />
              </div>
            ) : null}

            {dataParts?.length ? (
              <div>
                <Heading
                  title="Data Parts"
                  slug={`${componentName}.parts`}
                  level={tableHeadingLevel}
                />
                <CodeBlockWrapper class="not-prose text-sm font-normal">
                  <Code code={dataPartUsageCode} lang="html" theme="github-dark" />
                  <Code code={dataPartUsageCode} lang="html" theme="github-light" />
                </CodeBlockWrapper>
                <Table cols={['Name', 'Description']} rows={dataParts} />
              </div>
            ) : null}
          </div>
        );
      })}
    </>
  ) : null
}
