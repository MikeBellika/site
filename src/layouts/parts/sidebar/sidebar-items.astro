---
import clsx from 'clsx';

import { isSidebarGroup, type SidebarItem as TSidebarItem } from '../../nav/sidebar-items';
import SidebarItem from './sidebar-item.astro';

interface Props {
  items: TSidebarItem[];
  deepMatch?: boolean;
  depth?: number;
}

let { pathname } = Astro.url,
  { items, deepMatch, depth = 0 } = Astro.props;

pathname = pathname.replace(/\/$/, '');
---

{
  items.map((item) => {
    if (isSidebarGroup(item)) {
      return (
        <ul class="mt-7 flex flex-col" role="group">
          <h5 class="mb-2 font-semibold text-inverse">{item.title}</h5>
          <Astro.self items={item.items} {deepMatch} depth={depth + 1} />
        </ul>
      );
    } else {
      const isActive = deepMatch
        ? item.href === pathname ||
          (pathname.split('/').at(-2) === item.href.split('/').pop() &&
            pathname.startsWith(item.href))
        : item.href === pathname;

      return depth == 0 ? (
        <SidebarItem {...item} {isActive} />
      ) : (
        <li>
          <SidebarItem {...item} {isActive} />
        </li>
      );
    }
  })
}
